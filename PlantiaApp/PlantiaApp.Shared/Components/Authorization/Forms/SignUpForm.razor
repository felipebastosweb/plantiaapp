@using PlantiaApp.Shared.Components.Authorization.Records

@using Core.Contexts
@using Core.Entities

@inject NavigationManager Navigate

@inject SQLiteContexts Context

<h3>SignUp</h3>

<EditForm Model="UserInput" OnSubmit="OnSubmitClick">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3 Username">
        <label>Username</label>
        <InputText @bind-Value="UserInput.Username" class="@CssUsername" @oninput="UsernameIsValid" />
    </div>
    <div class="mb-3 Password">
        <label>Password</label>
        <InputText @bind-Value="UserInput.Password" type="password" class="@CssPassword" @oninput="PasswordIsValid" />
    </div>
    <div class="mb-3">
        <label>Repeat Password</label>
        <InputText @bind-Value="UserInput.RepeatPassword" class="@CssRepeatPassword" @oninput="RepeatPasswordIsEqualToPassword" />
    </div>
    <div class="mb-b3">
        <InputCheckbox @bind-Value="UserInput.AcceptTerms" class="form-check-input" @oninput="AcceptTermsChecked" />
        <label class="form-check-label">
            To use this application you must agree to the Terms of Use and Privacy Policy.
        </label>
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-success" @AcceptTermsDisabled >Confirm</button>
    </div>
</EditForm>


@code {

    /***
       User Story: Quando o usuário vai fazer o primeiro acesso na plataforma deve se cadastrar
       Scenary: O Username escolhido já existe
       Scenary: O Username escolhido não existe ainda
       Scenary: A senha definida é fraca
       Scenary: A senha definida é forte
    **/

    private SignUpInput UserInput { get; set; } = new();

    private string CssUsername = "form-control";
    private string CssPassword = "form-control";
    private string CssRepeatPassword = "form-control";
    private string CssAcceptTerms = "form-check-input";
    private string AcceptTermsDisabled = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void UsernameIsValid()
    {
        CssUsername = string.IsNullOrEmpty(UserInput!.Username) ? "form-control InValid" : "form-control Valid";
    }

    private void PasswordIsValid()
    {
        CssPassword = string.IsNullOrEmpty(UserInput!.Password) ? "form-control InValid" : "form-control Valid";
    }

    private void RepeatPasswordIsEqualToPassword()
    {
        CssRepeatPassword = UserInput!.RepeatPassword == UserInput!.Password ? "form-control InValid" : "form-control Valid";
    }

    private void AcceptTermsChecked()
    {
        CssAcceptTerms = "form-check-input InValid";
        AcceptTermsDisabled = "disabled";

        if (UserInput!.AcceptTerms)
        {
            CssAcceptTerms = "form-check-input Valid";
            AcceptTermsDisabled = "";
        }
    }

    public void Update()
    {
        StateHasChanged();
    }

    public async Task OnSubmitClick()
    {
        await Context!.Database!.InsertAsync(
            new User()
                {
                    Username = UserInput.Username,
                    PasswordHash = UserInput.Password,
                    CreatedDate = DateTime.Now,
                    //UpdatedDate = DateTime.Now,
                    //ArquivedDate = DateTime.Now
                });
        Navigate.NavigateTo("/home");
    }
}
