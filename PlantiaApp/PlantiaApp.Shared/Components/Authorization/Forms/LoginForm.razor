@using PlantiaApp.Shared.Components.Authorization.Records

@using Core.Contexts
@using Core.Entities

@inject SQLiteContexts Context

@inject NavigationManager Navigate

<!--
User Story: Quando o usuário já é cadastrado na plataforma mas ainda não usou o dispositivo deve se logar nesse dispositivo
-->

<h3>LoginForm</h3>


<EditForm Model="UserInput" OnSubmit="OnSubmitClick">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3 Username">
        <label>Username</label>
        <InputText @bind-Value="UserInput!.Username" class="@CssUsername" @oninput="UsernameIsValid" />
    </div>
    <div class="mb-3 Password">
        <label>Password</label>
        <InputText @bind-Value="UserInput!.Password" type="password" class="@CssPassword" @oninput="PasswordIsValid" />
    </div>
    <div class="mb-b3">
        <InputCheckbox @bind-Value="UserInput!.KeepConnected" class="form-check-input" />
        <label class="form-check-label">
            I want keep me connected.
        </label>
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-success">Confirm</button>
    </div>
    <div class="mb-3">
        <p>Esqueceu sua senha? <a href="/rescue-account">Clique aqui</a>.</p>
    </div>
</EditForm>


@code {
    /***
    * Como visitante desejo
    **/

    private LoginInput? UserInput { get; set; } = new();

    private string CssUsername = "form-control";
    private string CssPassword = "form-control";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void UsernameIsValid()
    {
        CssUsername = string.IsNullOrEmpty(UserInput!.Username) ? "form-control InValid" : "form-control Valid";
    }

    private void PasswordIsValid()
    {
        CssPassword = string.IsNullOrEmpty(UserInput!.Password) ? "form-control InValid" : "form-control Valid";
    }

    public async Task OnSubmitClick()
    {
        await Context!.Init();
        var user = await Context!.Database!.Table<User>()
            .Where(user => user.Username == UserInput!.Username && user.PasswordHash == UserInput!.Password)
            .FirstAsync();

        if (user != null)
        {
            // TODO: Salvar sessão do usuário para ficar Logado
            Navigate.NavigateTo("/home");
        }
    }

}
